---
title: "Using resmush"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Using resmush}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

<!-- resmush.Rmd is generated from resmush.Rmd.orig. Please edit that file -->

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  warning = FALSE,
  message = FALSE,
  dev = "ragg_png",
  tidy = "styler",
  fig.path = "man/figures/README-",
  dpi = 120,
  out.width = "100%"
)
```

**resmush** is a **R** package that allow users to optimize and compress images
using [reSmush.it](https://resmush.it/). reSmush.it is a free API that provides
image optimization, and it has been implemented on Wordpress, Drupal or Magento.

Some of the features of reSmush.it are:

-   Free optimization services, no API key required.
-   Optimize local and online images.
-   Image files supported: `png`, `jpg`, `gif`, `bmp`, `tif`.
-   Max image size: 5 Mb.
-   Compression via several algorithms:
    -   [**PNGQuant**](https://pngquant.org/): Strip unneeded chunks from
        `png`s, preserving a full alpha transparency.
    -   [**JPEGOptim**](https://github.com/tjko/jpegoptim)**:** Lossless
        optimization based on optimizing the Huffman tables.
    -   [**OptiPNG**](https://optipng.sourceforge.net/): `png` reducer that is
        used by several online optimizers.

## Example

Compressing an online `jpg` image:

```{r example}
library(resmush)

url <- paste0("https://raw.githubusercontent.com/dieghernan/",
              "resmush/main/img/jpg_example_original.jpg")

resmush_url(url, outfile = "jpg_example_compress.jpg")

```

::: figure
<img src="https://raw.githubusercontent.com/dieghernan/resmush/main/img/jpg_example_original.jpg" alt="Original online figure" width="100%"/>

<img src="./jpg_example_compress.jpg" alt="Optimized figure" width="100%"/>

<p class="caption">

Original picture (top) 178.7 Kb and optimized picture (bottom) 45 Kb
(Compression 74.8%)

</p>
:::

The quality of the compression can be adjusted in the case of `jpg` files using
the parameter `qlty`. However, it is recommended to keep this value above 90 to
get a good image quality.

```{r jpgcompresslow}

resmush_url(url, outfile = "jpg_example_low.jpg", qlty = 10,
            verbose = TRUE)

```

::: figure
![Low quality figure](./jpg_example_low.jpg){width="100%"}

<p class="caption">

Low quality image due to a high compression rate.

</p>
:::

All the functions return invisibly a data set with a summary of the process. The
next example shows how when compressing a local file.

```{r pngfile}

tmpfile <- tempfile(fileext = ".png")
url2 <- paste0("https://raw.githubusercontent.com/dieghernan/",
              "resmush/main/img/png_example_original.png")

download.file(url2, tmpfile, quiet = TRUE)

summary <- resmush_file(tmpfile)

tibble::as_tibble(summary[,-c(1,2)])

```

## Other alternatives

- [**xfun**](https://cran.r-project.org/package=xfun) package by Yihui
  Xie [![Sponsor Yihui Xie on
  GitHub](https://raw.githubusercontent.com/dieghernan/resmush/main/man/figures/donate.svg)](https://github.com/sponsors/yihui)
  has the following functions that optimize image files:
    -   `xfun::tinify()` is similar to `resmush_file()` but uses
        [TinyPNG](https://tinypng.com/). API key required.
    -   `xfun::optipng()` compress local files with OptiPNG (that needs to be
        installed locally).
-   [**optout**](https://github.com/coolbutuseless/optout) package by
    [\@coolbutuseless](https://coolbutuseless.github.io/). Similar to
    `xfun::optipng()` with additionall options. Needs additional software
    installed locally.
-   [Imgbot](https://imgbot.net/): Automatic optimization for files hosted in
    GitHub repos.
